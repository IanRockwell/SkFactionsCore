options:
    radius: 20 # in chunks

import:
    com.massivecraft.factions.FLocation
    com.massivecraft.factions.Board
    com.massivecraft.factions.Faction
    com.massivecraft.factions.Factions
    com.massivecraft.factions.FPlayer
    com.massivecraft.factions.FPlayers   

function get_chunks_in_region_around(chunk: chunk, radius: integer) :: chunks:
    set {_location} to block at 0, 0, 0 in {_chunk}
    add {_radius} * 16 to x coordinate of {_location}
    add {_radius} * 16 to z coordinate of {_location}
    set {_original_x} to x coordinate of {_location}
    set {_radius} to {_radius} * 2
    broadcast ({_radius} / 2) * 16
    loop {_radius} times:
        loop {_radius} times:
            add {_location}'s chunk to {_chunks::*}
            subtract 16 from x coordinate of {_location}
        subtract 16 from z coordinate of {_location}
        set x coordinate of {_location} to {_original_x}
    return {_chunks::*}

function get_chunks_in_claim(faction: text, chunks: chunks) :: chunks:
    loop {_chunks::*}:
        set {_location} to block at 7, 0, 7 in loop-value
        set {_f} to Board.getInstance().getFactionAt(new FLocation({_location}))
        "%{_f}%" is "%{_faction}%" # Annoyingly this check doesn't work unless I do it like this
        add loop-value to {_return::*}
    return {_return::*}

function get_nearby_claims(playerfaction: text, chunk: chunk, radius: integer) :: chunks:
    set {_chunks::*} to get_chunks_in_region_around({_chunk}, {_radius})
    return get_chunks_in_claim("%{_playerfaction}%", {_chunks::*})

command /test:
    trigger:
        set {_now1} to now
        set {_playerfaction} to FPlayers.getInstance().getByPlayer(player).getFaction()
        set {_chunks::*} to get_nearby_claims("%{_playerfaction}%", player's chunk, {@radius})
        set {_now2} to now
        send "Found %size of {_chunks::*}% nearby chunks."
        send "Took: %difference between {_now1} and {_now2}%"